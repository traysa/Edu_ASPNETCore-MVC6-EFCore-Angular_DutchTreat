---------------------------------------------------------------------------------------
Configurations
---------------------------------------------------------------------------------------
- Setting the port: Go to properties of the project --> Debug --> Web Server Settings 
  and change the App URL with the according port
- You can choose between running the web app via console or via IIS Express (default)

---------------------------------------------------------------------------------------
Model-View-Controller
---------------------------------------------------------------------------------------
- MVC 6 is Framework
- Model: Data, interacts e.g. with a database
- Controller: Logik
- View: Markup for display
- When a request comes in, it is likely to be received by the controller class
- Controller might do some model calls to get data to work on
- Controller then prepare results for View
- View is rendering and sends reponse to the user

---------------------------------------------------------------------------------------
ASP.NET MVC convention
---------------------------------------------------------------------------------------
- In a controller class (e.g. "AppController") you provide actions (e.g. "Index") via
  methods, which can return a view
	- View Controllers are the API
	- View Controllers allow simple URI mapping via annotations
	- In View Controllers you work with status codes
	- In View Controllers you differentiate actions via REST verbs
- How does it know which view to call?
  - It is looked into the "Views" folder for an folder, which is named after the 
	controller (in this case "App")
  - In this folder all views for the controller should be found
  - The View must be named like the action (in this case "Index")
 - A view represents not an html file, but a razor file
   - Razor is a syntax for generating/replacing/adding small amount of view logic in
     html with C#
- ASP.NET Core requires Dependency Injection

---------------------------------------------------------------------------------------
View Models / Model Binding
---------------------------------------------------------------------------------------
- Bind form input to C# classes
- Allows to use validation annotation for the input data (e.g. OrderViewModel.cs)
- In the controllers (e.g. in AppController.cs), MVC will map the names of the form fields to the property of the given View Model class instead of a generell object class 

---------------------------------------------------------------------------------------
Bootstrap
---------------------------------------------------------------------------------------
- Open Source Framework for Web Apps
- Based on CSS and langugae LESS (procedural version of CSS)
- Has javascript components to handle things HTML has not built-in
- Support of common metaphors such as handling forms, model windows, navigation systems, tabs, buttons, ...
- Adding bootstrap to the project
	- add bootstrap to the bower file

---------------------------------------------------------------------------------------
Entity Framework Core
---------------------------------------------------------------------------------------
- Complete re-write of the original Entity Framework
	- Now the Entity Framework is not binded to only Relational DBs
- Open Source Framework
- EF6 is more mature than EF Core
	- EF6 requires desktop .NET 4.x
- Creating entities
	- Classes, which define the shape of the data we want to store in the DB
- Creating a db context
	- Via the context class the properties are defined which allows to querry entities in the DB table (get and add)
- EF Core Tooling
	- Can be added via a nuget package in the .csproj file
	- After saving the .csproj file the NuGet package is stored and the ef tools can be used (write "dotnet ef" in cmd; navigate to project folder)
	- It is required to tell the db context (DutchContext.cs), which DB provider and connection string to use
	- With the command "dotnet ef database update"  (navigate to project folder before) a databse should be created matching the db context in the project (DutchContext.cs)
	- With the command "dotnet ef migrations add <Name>" (navigate to project folder before) a migration file is created, which contains the code, which is actually adding new tables to the empty db when executing "dotnet ef database update" (navigate to project folder before)

---------------------------------------------------------------------------------------
Configuration files
---------------------------------------------------------------------------------------
- In the Programm.cs the WebHost.CreateDefaultBuilder would create a default configuration file
- To define own configuration files a delegate can be added via WebHost.ConfigureAppConfiguration(<Config Delegate>)
- In the Config Delegate the different configuration files can be defined
- There are predefined configuration keys like "ConnectionStrings" or "Logging"

---------------------------------------------------------------------------------------
AutoMapper
---------------------------------------------------------------------------------------
- NuGet Package "AutoMapper"
- Tool to map types in a conventional way
- Similar tools are existing
- Since ASP.NET Core is used, we also need the NuGet Package "AutoMapper.Extensions.Microsoft.DependencyInjection",
	which is a Wrapper to allow dependency injection to deal with AutoMapper in ASP.NET Core in a smart way
- Add AutoMapper support by adding it to the Service Collection i the Startup.cs
- Create Mapping Profile (e.g. DutschMappingProfile.cs) to define mapping
- Use mapping in the controller (e.g. OrdersController) to map between entities and their according view models

---------------------------------------------------------------------------------------
ASP.NET Core Identity
---------------------------------------------------------------------------------------
- Replacement for ASP.NET Membership
- Supports more types of authentication
	- Cookies, Open ID, OAuth2, JSON Web Tokens (JWT Tokens), etc.
	- Cookies are easiet, but least secure
- Pluggable
	- How you store your identities (user entities) and which properties to store on them
	- You can get identities (user entities) from non-relational sources or even LDAP/AD stores
- Identities can use existing (also used for other entities) or new DbContext
- Authorization attribute to protect views and/or APIs
- Identity Configuration to control rules regarding Email, password etc. (see "services.AddIdentity()" in Startup.cs)
- Use Identity for read (see get actions in OrdersController and OrderitemsController) and write (see post action in OrdersController)

---------------------------------------------------------------------------------------
Storing Identities in the database
---------------------------------------------------------------------------------------
- Instead DutchContext is deriving from DbContext, it is deriving from IdentityDbContext (A separate context also could have been created)
- IdentityDbContext contains the Entity Framework Core as storage mechanism (like DBContext) plus some extra Identity functionality
- A custom IdentityUser class is defined ("Store User"), which is deriving from IdentityUser; this allows additional properties to the IdentityUser default properties
- The custom IdentityUser class must be given as generic parameter to IdentityDbContext, which is used by DutchContext
- Since new entities have been added to the data model,  migrations have to be added via the console
	- dotnet ef migrations add Identity --> Creates a new migration class called "Identity"
	- dotnet ef database drop --> drop all existing databases, since several changes had been made (current data in the db is not used); on next startup the tables and relations are re-created with seeding

---------------------------------------------------------------------------------------
What is JSON Web Token (JWT)?
---------------------------------------------------------------------------------------
- See: https://jwt.io/introduction/
- Open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object
- the information can be verified and trusted because it is digitally signed
- JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA
- Compact: Because of their smaller size, JWTs can be sent through a URL, POST parameter, or inside an HTTP header; smaller size = transmission is fast
- Self-contained: Payload contains required information about the user, avoiding the need to query the database more than once

---------------------------------------------------------------------------------------
Setup basic JSON Web Token (JWT)?
---------------------------------------------------------------------------------------
- Issuing a token
	- Create a Post action, which can issue a token, in the account controller
	- In the post action prepare the token specification with "new JwtSecurityToken()"
		- claims
		- encryption key
		- signing credentials
		- issue and audience (cannot be empty)
		- expiration date
	- In the post action create token with "new JwtSecurityTokenHandler().WriteToken(token)", where token is the token specification
	- In the post action return a result object containing the generated token string
	- Get the token string by calling the post action with username and password in the body
- Validate incoming tokens
	- Setup authentication in the Startup.cs via "services.AddAuthentication().AddJwtBearer(configureOptions)" (must be before "services.AddMvc()")
	- Setup the parameters for validating incoming tokens in the configureOptions
	- When sending a get request add a Header for key "Authorization" with value "Bearer <token-string>"
- Require JWT tokens
	- To require token for certain actions or whole controllers use the annotation "[Authorize(AuthenticationSchemes=JwtBearerDefaults.AuthenticationScheme)]" (e.g. in OrdersController)
	- Since no cookies are allowed then but only tokens: No redirection to Login page happens on API, instead 401 status error
    