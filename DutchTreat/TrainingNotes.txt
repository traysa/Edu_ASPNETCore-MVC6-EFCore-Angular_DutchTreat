---------------------------------------------------------------------------------------
Configurations
---------------------------------------------------------------------------------------
- Setting the port: Go to properties of the project --> Debug --> Web Server Settings 
  and change the App URL with the according port
- You can choose between running the web app via console or via IIS Express (default)

---------------------------------------------------------------------------------------
Model-View-Controller
---------------------------------------------------------------------------------------
- MVC 6 is Framework
- Model: Data, interacts e.g. with a database
- Controller: Logik
- View: Markup for display
- When a request comes in, it is likely to be received by the controller class
- Controller might do some model calls to get data to work on
- Controller then prepare results for View
- View is rendering and sends reponse to the user

---------------------------------------------------------------------------------------
ASP.NET MVC convention
---------------------------------------------------------------------------------------
- In a controller class (e.g. "AppController") you provide actions (e.g. "Index") via
  methods, which can return a view
	- View Controllers are the API
	- View Controllers allow simple URI mapping via annotations
	- In View Controllers you work with status codes
	- In View Controllers you differentiate actions via REST verbs
- How does it know which view to call?
  - It is looked into the "Views" folder for an folder, which is named after the 
	controller (in this case "App")
  - In this folder all views for the controller should be found
  - The View must be named like the action (in this case "Index")
 - A view represents not an html file, but a razor file
   - Razor is a syntax for generating/replacing/adding small amount of view logic in
     html with C#
- ASP.NET Core requires Dependency Injection

---------------------------------------------------------------------------------------
View Models / Model Binding
---------------------------------------------------------------------------------------
- Bind form input to C# classes
- Allows to use validation annotation for the input data (e.g. OrderViewModel.cs)
- In the controllers (e.g. in AppController.cs), MVC will map the names of the form fields to the property of the given View Model class instead of a generell object class 

---------------------------------------------------------------------------------------
Bootstrap
---------------------------------------------------------------------------------------
- Open Source Framework for Web Apps
- Based on CSS and langugae LESS (procedural version of CSS)
- Has javascript components to handle things HTML has not built-in
- Support of common metaphors such as handling forms, model windows, navigation systems, tabs, buttons, ...
- Adding bootstrap to the project
	- add bootstrap to the bower file

---------------------------------------------------------------------------------------
Entity Framework Core
---------------------------------------------------------------------------------------
- Complete re-write of the original Entity Framework
	- Now the Entity Framework is not binded to only Relational DBs
- Open Source Framework
- EF6 is more mature than EF Core
	- EF6 requires desktop .NET 4.x
- Creating entities
	- Classes, which define the shape of the data we want to store in the DB
- Creating a db context
	- Via the context class the properties are defined which allows to querry entities in the DB table (get and add)
- EF Core Tooling
	- Can be added via a nuget package in the .csproj file
	- After saving the .csproj file the NuGet package is stored and the ef tools can be used (write "dotnet ef" in cmd)
	- It is required to tell the db context (DutchContext.cs), which DB provider and connection string to use
	- With the command "dotnet ef database update" a databse should be created matching the db context in the project (DutchContext.cs)
	- With the command "dotnet ef migrations add <Name>" a migration file is created, which contains the code, which is actually adding new tables to the empty db when executing "dotnet ef database update"

---------------------------------------------------------------------------------------
Configuration files
---------------------------------------------------------------------------------------
- In the Programm.cs the WebHost.CreateDefaultBuilder would create a default configuration file
- To define own configuration files a delegate can be added via WebHost.ConfigureAppConfiguration(<Config Delegate>)
- In the Config Delegate the different configuration files can be defined
- There are predefined configuration keys like "ConnectionStrings" or "Logging"

---------------------------------------------------------------------------------------
AutoMapper
---------------------------------------------------------------------------------------
- NuGet Package "AutoMapper"
- Tool to map types in a conventional way
- Similar tools are existing
- Since ASP.NET Core is used, we also need the NuGet Package "AutoMapper.Extensions.Microsoft.DependencyInjection",
	which is a Wrapper to allow dependency injection to deal with AutoMapper in ASP.NET Core in a smart way
- Add AutoMapper support by adding it to the Service Collection i the Startup.cs
- Create Mapping Profile (e.g. DutschMappingProfile.cs) to define mapping
- Use mapping in the controller (e.g. OrdersController) to map between entities and their according view models
